import DevBuildError from "../lib/DevBuildError.js";

const errorHandler = (err, req, res, next) => {
  if (res.headersSent) return next(err);

  const isProd = process.env.NODE_ENV === "production";

  // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü
  let status = err.statusCode || 500;
  let message = err.message || "Unknown error";

  // ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶è‡¶∞‡¶∞
  if (err instanceof DevBuildError) {
    status = err.statusCode || status;
    message = err.message || message;
  }

  // ‡¶ï‡¶Æ‡¶® ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡ßá)
  if (err.name === "ValidationError") {
    status = 400;
    message = "Validation failed";
  }
  if (err.name === "CastError") {
    status = 400;
    message = "Invalid ID format";
  }
  if (err.code === 11000) { // Mongo duplicate key
    status = 409;
    const fields = Object.keys(err.keyValue || {});
    message = `Duplicate value for: ${fields.join(", ") || "unknown field"}`;
  }
  if (err.name === "JsonWebTokenError") {
    status = 401;
    message = "Invalid token";
  }
  if (err.name === "TokenExpiredError") {
    status = 401;
    message = "Token expired";
  }

  // ‡¶≤‡¶ó ‡¶∞‡¶æ‡¶ñ‡¶æ (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç‡ßü‡ßá ‡¶ï‡¶æ‡¶ú‡ßá ‡¶¶‡ßá‡¶¨‡ßá)
  console.error("üî• Error:", {
    method: req.method,
    url: req.originalUrl,
    status,
    message,
    stack: err.stack,
  });

  // ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏‚Äî‡¶™‡ßç‡¶∞‡ßã‡¶°‡ßá stack ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶ì, ‡¶°‡ßá‡¶≠‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
  const payload = { success: false, message };
  if (!isProd && err.stack) payload.stack = err.stack;

  return res.status(status).json(payload);
};

export default errorHandler;
